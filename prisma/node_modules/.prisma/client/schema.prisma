generator client {
  provider = "prisma-client-js"
  output   = "node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

enum Role {
  ADMIN
  CUSTOMER
}

model Category {
  id             String          @id @default(cuid())
  name           String
  slug           String          @unique
  image          String?
  description    String?
  products       Product[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  categoryImages CategoryImage[] // Relación con las imágenes de categorías
}

model CategoryImage {
  id         String   @id @default(cuid()) // usa String
  url        String
  categoryId String // usa String
  category   Category @relation(fields: [categoryId], references: [id])
}

model Product {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  description String
  price       Decimal        @db.Decimal(12, 0)
  stock       Int            @default(0)
  featured    Boolean        @default(false) // <-- NUEVO CAMPO
  images      ProductImage[]
  category    Category       @relation(fields: [categoryId], references: [id])
  categoryId  String
  orderItems  OrderItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
}

model Order {
  id              String      @id @default(cuid())
  user            User        @relation(fields: [userId], references: [id])
  userId          String
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(12, 0) // Total en COP
  shippingAddress String
  paymentMethod   String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal @db.Decimal(12, 0) // Precio unitario en COP
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
