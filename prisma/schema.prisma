// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Customer {
  id                String    @id @default(cuid())
  email             String    @unique
  name              String
  password          String
  emailVerified     DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relaciones
  orders            Order[]
  reviews           Review[]
  addresses         Address[]
  wishlistItems     WishlistItem[]
  accounts          CustomerAccount[] // Añadida relación inversa

  @@map("customers")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones
  products    Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  price       Float
  images      String[]
  stock       Int      @default(0)
  featured    Boolean  @default(false)
  gender      Gender   @default(UNISEX)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]
  wishlistItems WishlistItem[]
  productSizes ProductSize[]

  @@map("products")
}

model ProductSize {
  id        String @id @default(cuid())
  size      String
  stock     Int    @default(0)
  
  // Relaciones
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([productId, size])
  @@map("product_sizes")
}

model Order {
  id              String      @id @default(cuid())
  status          OrderStatus @default(PENDING)
  total           Float
  subtotal        Float
  tax             Float       @default(0)
  shipping        Float       @default(0)
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  stripePaymentId String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relaciones
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  items           OrderItem[]
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?

  @@map("orders")
}

model OrderItem {
  id        String @id @default(cuid())
  quantity  Int
  price     Float
  size      String?
  
  // Relaciones
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Address {
  id       String @id @default(cuid())
  street   String
  city     String
  state    String
  zipCode  String
  country  String  @default("Colombia")
  isDefault Boolean @default(false)
  
  // Relaciones
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  orders     Order[]

  @@map("addresses")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5
  comment   String
  createdAt DateTime @default(now())
  
  // Relaciones
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relaciones
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])

  @@unique([customerId, productId])
  @@map("wishlist_items")
}

// Tabla para tokens de verificación de email y recuperación de contraseña
model VerificationToken {
  id         String            @id @default(cuid())
  identifier String            // Email del usuario
  token      String            @unique
  type       VerificationType  @default(EMAIL_VERIFICATION)
  expires    DateTime
  createdAt  DateTime          @default(now())
  used       Boolean           @default(false)
  usedAt     DateTime?

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Tabla para cuentas OAuth de customers
model CustomerAccount {
  id                String  @id @default(cuid())
  customerId        String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("customer_accounts")
}

// Tabla para sesiones de autenticación (NextAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())

  @@map("sessions")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  HOMBRE
  MUJER
  UNISEX
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  PAID
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum VerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}
