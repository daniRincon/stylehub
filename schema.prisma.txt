generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  role      AdminRole  @default(VENDEDOR)
  logs      AdminLog[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum AdminRole {
  ADMIN
  VENDEDOR
}

model Customer {
  id         String        @id @default(uuid())
  name       String
  email      String        @unique
  password   String?
  phone      String?
  address    String?
  city       String?
  postalCode String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  orders     Order[]
  reviews    Review[]
  wishlist   Wishlist[]
  notifications Notification[]
}

model Category {
  id             String          @id @default(cuid())
  name           String
  slug           String          @unique
  image          String?
  description    String?
  products       Product[]
  categoryImages CategoryImage[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model CategoryImage {
  id         String   @id @default(cuid())
  url        String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Product {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String
  price       Decimal       @db.Decimal(12, 0)
  stock       Int           @default(0)
  featured    Boolean       @default(false)
  images      ProductImage[]
  categoryId  String
  category    Category      @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  reviews     Review[]
  wishlist    Wishlist[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Order {
  id              String      @id @default(cuid())
  customerId      String
  customer        Customer    @relation(fields: [customerId], references: [id])
  items           OrderItem[]
  status          OrderStatus @default(PENDING)
  total           Decimal     @db.Decimal(12, 0)
  shippingAddress String
  paymentMethod   String
  paymentIntentId String?     // Añadido para Stripe
  payment         Payment?    @relation("OrderPayment")
  invoice         Invoice?    @relation("OrderInvoice")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(12, 0)
  size      String? // Añadido para el checkout
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  PAID        // Añadido para pagos con Stripe
}

model Payment {
  id         String   @id @default(cuid())
  orderId    String   @unique
  order      Order    @relation("OrderPayment", fields: [orderId], references: [id])
  method     String
  status     String
  paidAt     DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Invoice {
  id          String   @id @default(cuid())
  orderId     String   @unique
  order       Order    @relation("OrderInvoice", fields: [orderId], references: [id])
  invoiceDate DateTime @default(now())
  totalAmount Decimal  @db.Decimal(12, 0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id         String   @id @default(cuid())
  rating     Int
  comment    String?
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Wishlist {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  productId  String
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Notification {
  id          String   @id @default(cuid())
  customerId  String
  customer    Customer @relation(fields: [customerId], references: [id])
  title       String
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdminLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}